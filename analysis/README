##########################################################
# A. Irles, irles @ lal.in2p3.fr
# LAL-CNRS/IN2P3
# 30th January 2019
##########################################################

# -------------------------------------------------------------------------------------------------------------------------
#|| BASIC PLOTTING STUFF
# -------------------------------------------------------------------------------------------------------------------------
Instructions to run the kanotagger.C 
--------------------------------------------------
First, change appropiately the input file name in both places of the kaontagger.h, function kaontagger::kaontagger(TTree *tree) 
Example:

> root -l kaontagger.C+
root [1] kaontagger a
a.Selection(true,0,true)

It is basically a code for plotting and comparison of the different methods.
We rely in having run before the ParticleTagger algorithm and having reated the "KaonTagger" PID output.

Still there is no code writen to optimize the parameters to be used on the ParticleTagger.

Functions implemented:
---------------------------------------------------

$ -> virtual void     Selection(bool secondary,int algorithm,bool combined);

Main function. Arguments: secondary (true if the analysis is done only for displaced tracks), algorithm (PID algorithm to study), combined (true if we want to improve the results of the KaonTagger by combining it with info of the other algorithms)

algorithms are: 0- LikelihoodPID, 1- LowMomentumID, 2- BasixVariablePID, 3- dEdxPID


$ -> Filling and Initializing histograms
  virtual void     Initialize();
  virtual void     Fill_histos_new_ID(int,bool);
  virtual void     Fill_histos_DST_ID(int,int);
  virtual void     Fill_histos_likelihood_DST_ID(int);

$ -> Plotting

  virtual void     Plots(int algo); --> de/dx truth and de/dx for the identified particles using algorithm "algo"
  
  virtual void     PlotsCorrected(); --> How does the de/dx looks if we project it to the diagonal used in ParticleTagger
  
  virtual void     PlotsProjection(); --> Project of de/dx of different particles at different values of the momentum (to see how well do we separate the different particles)
  virtual void     PlotsLikelihood(); --> Plot the likelihood value for the identified kaons
  virtual void     SimplePlot(int);
  
# -------------------------------------------------------------------------------------------------------------------------
#|| Calculate Parameters to apply the KaonTagger
# -------------------------------------------------------------------------------------------------------------------------

1) Modify CalculateParameteres.h to use the proper root file (in CalculateParameteres::CalculateParameteres(TTree *tree)

> root -l CalculateParameters.C+
root [1] CalculateParameters a
a.Parameters(true,2)//true = only secondary tracks, 2= minimum momentum of these tracks in GeV

Output --> ONE OF THE LINES IS TO BE COPIED IN THE PROCESSOR XML FILE

eff_input>0.45:     purity=0.822935 eff=0.452079;    slope=0.017984 upper=0.10838 lower=0.0978378
eff_input>0.5:     purity=0.819069 eff=0.511006;    slope=0.017984 upper=0.10838 lower=0.0955461
eff_input>0.55:     purity=0.812799 eff=0.553457;    slope=0.017984 upper=0.108838 lower=0.0946294
eff_input>0.6:     purity=0.806376 eff=0.604067;    slope=0.017984 upper=0.109297 lower=0.0932544
eff_input>0.65:     purity=0.798903 eff=0.650374;    slope=0.017984 upper=0.110213 lower=0.0937127
eff_input>0.7:     purity=0.790551 eff=0.705234;    slope=0.017984 upper=0.110672 lower=0.0918793
eff_input>0.75:     purity=0.782162 eff=0.751305;    slope=0.017984 upper=0.11113 lower=0.0900459
eff_input>0.8:     purity=0.770552 eff=0.80202;    slope=0.017984 upper=0.111588 lower=0.0868375
eff_input>0.85:     purity=0.760274 eff=0.851686;    slope=0.017984 upper=0.112505 lower=0.0882125
eff_input>0.9:     purity=0.748108 eff=0.901272;    slope=0.017984 upper=0.113422 lower=0.0891292
eff_input>0.95:     purity=0.736546 eff=0.950151;    slope=0.017984 upper=0.11388 lower=0.0872959

